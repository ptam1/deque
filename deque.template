
#include <cassert>   // Provides assert
#include <iostream>
#include <cstdlib>
#include "node2.h"  // Node template class
#include "deque.h"
using namespace std;


//postcondition: empty deque has been created
template <class T>
deque<T>::deque()
{
	count = 0;
	first = NULL;
	last = NULL;
}
	
// postcondition: all resouroces allocated to the deque have been deallocated
template <class T>
deque<T>::~deque()
{
	 list_clear(first);
}
	
// postcondition: newly created deque is a copy of dq
template <class T>
deque<T>::deque(const deque<T>& dq)
{
	count = dq.count;
	list_copy(dq.first, first, last);
}
	
// postcondition: current deque is a copy of dq 
template <class T>
deque<T>& deque<T>::operator = (const deque<T>& dq)
{
  if (this == &dq) // Handle self-assignment
  {
//	return;
  }
        list_clear(first);
        list_copy(dq.first, first, last);
        count = dq.count;
}
	
	
//precondition: deque is not empty
// postcondition: reference to element at front of deque has been returned
template <class T>
T& deque<T>::front()
{
	if(!empty())
	{
		return first->data();
	}
	else
	{
		cout << "Deque is Empty" << endl;
	}
}
	
	
// precondition: deque is not empty
// postcondition: copy of element at front of deque has been returned
template <class T>
T deque<T>::front() const
{
	if(!empty())
	{
		return first->data();
	}
	else
	{
		cout << "Deque is Empty" << endl;
	}
}


// precondition: deque is not empty
// postcondition: reference to element at front of deque has been returned
template <class T>
T& deque<T>::back()
{
	if(!empty())
	{
		return last->link()->data();
	}
}
    
// precondition: deque is not empty
// postcondition: copy of element at back of deque has been returned
template <class T>
T deque<T>::back() const
{
	if(!empty())
	{
		return last->link()->data();
	}
}	


// precondition: deque is not full
// postcondition: entry has been inserted at the front of the deque
template <class T>
void deque<T>::push_front (const T& entry)
{
	list_head_insert(first, entry);
	count++;
}

	
// precondition: deque is not full
// postcondition: entry has been inserted at the back of the deque
template <class T>
void deque<T>::push_back (const T& entry)
{
node<T>* previous = NULL;
for(node<T>* i = first; i != NULL; i = i->link())	
{
	while(i->link() != NULL)
	{
		if(i->link() != last)
		{
		previous = i;
		}
		i = i->link();
	}
}
list_insert(previous->link(), entry);
last = previous->link();
count++;	
}

// precondition: deque is not empty
// postcondition: element at front of deque has been removed
template <class T>
void deque<T>::pop_front()
{
	node<T>* temp = first->link();
	if(!empty())
	{
		list_head_remove(first);
	}
	first = temp;
	count--;
}

// precondition: deque is not empty
// postcondition: element at back of deque has been removed
template <class T>
void deque<T>::pop_back()
{
	node<T>* previous = NULL; 
	if(!empty())
	{
	node<T>* current = first;
	while(current->link() != NULL)
	{
		if(current->link() != last)
		{
			previous = current;
		}
		current = current->link();
	}
	list_remove(previous);
	}
	last = previous;
	count--;
}

// postcondition: number of elements in deque has been returned
template <class T>
typename deque<T>::size_type deque<T>::size() const
{
	return count;
}


// postcondition: whether deque is empty has been returned
template <class T>
bool deque<T>::empty() const
{
	if(count == 0)
	{
		return true;
	}
	else
	{
		return false;
	}		
}

   
// postcondition: returned whether 2 deques are equal - equal is defined
// as the deques have the same number of elements & corresponding elements are equal
template <class U>
bool operator == (const deque<U>& dq1, const deque<U>& dq2)
{
	bool sameElements = false;
	bool sameNum = false;
	bool answer = false;
	
	if(dq1.size() == dq2.size())
	{
		sameNum = true;
	}
	for(node<U>* i = dq1.first; i != NULL; i = i->link())
	{
		for(node<U>* j = dq2.first; j != NULL; j = j->link())
	{
		if(i->data() == j->data())
		{
			sameElements = true;
		}
	}
	}
	
	if((sameNum == true) && (sameElements == true))
	{
		answer = true;
	}
	return answer;
}



// postcondition: dq has been display from front to rear on out
template <class U>
std::ostream& operator<< (std::ostream& out, const deque<U>& dq)
{
	for(node<U>* i = dq.first; i != NULL; i = i->link())
	{
		out << i->data()  << " ";
	}
return out;
}
